"""
En aquest mòdul hi ha els tests de totes les classes creades, on es veu el correcte funcionament quan les implementem totes alhora.
Tots els altres mòduls han sigut agafats dels codis d'exemple de la llibreria ultimate descarregada d'internet.
"""

"""
importem totes les llibreries
"""
from machine import Pin
import time
import Ultrasonic_Ranging
from Ultrasonic_Ranging import getSonar
from myservo import myServo

import bluetooth
from ble_advertising import advertising_payload

from micropython import const
from BLE import BLESimplePeripheral

from rpi_motor import *

from UartClass import UartClass

uart_communication = UartClass(0,1,3)		#tx,rx

"""
declarem els pins corresponents de cada un dels components
"""
servo=myServo(15)
"""
set servo pin
"""
servo.myServoWriteAngle(0)
"""
Set Servo Angle
"""
sensorPin=Pin(13,Pin.IN)
ledPin=Pin(14,Pin.OUT)
ble = bluetooth.BLE()
p = BLESimplePeripheral(ble)
    
time.sleep_ms(1000)
flag = False
flag2 = False

"""
funció per preparar el bluethooth
"""
def on_rx(rx_data):
    global flag
    global flag2
    print(rx_data)
    cadena = rx_data.decode('utf-8')
    print(cadena)

    if cadena == "start":
        print('START')
        flag = True

    if cadena == "stop":
        print('STOP')
        flag2 = True
        
        
p.on_write(on_rx)
    
print("Please use LightBlue to connect to ESP32S3.")

while flag2 == False:
    
    if flag == True:
        """
        si recibe 'start'
        """
        #uart_communication.send_command("start")
        
        #if uart_communication.receive_command() == "start":
            
            #print('UAAAAAAAART')
        
        if not sensorPin.value():
        """
        si no detecta linia
        """
            ledPin.value(1)
            """
            Set led turn on
            """
            print('cuidado')
        else:
        """
        detecta linia
        """
            ledPin.value(0)
            """
            Set led turn off (indicador)
            """
            print('sigue linia')
        
        servo.myServoWriteAngle(0)
        """
        canviar posició servo
        """
        time.sleep_ms(500)
        distance = getSonar()
        """
        agafa distancia
        """
        print('Distance: ',distance,'cm' )

        #comprovar la dist. pels dos costats
        if distance < 50:
        """
        si hi ha objecte
        """
            print('esquivar')
        
        servo.myServoWriteAngle(90)
        """
        canviar posició servo
        """
        time.sleep_ms(500)
        distance = getSonar()
        """
        agafar dist.
        """
        print('Distance: ',distance,'cm' )
        
        if distance < 50:
            print('esquivar')

